// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id       String  @id @default(cuid())
    name     String
    username String  @unique
    image    String?
    lastName String
    password String

    accounts Account[]
    sessions Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// CENSO 

model Familiar {
    id BigInt @id()

    nombres         String
    apellidos       String
    numeroDocumento String
    edad            Int

    fechaNacimiento DateTime
    genero          String
    email           String
    telefono        String

    serialCarnetPatria String
    codCarnetPatria    String

    observacion String
    parentesco  String

    Censo Censo[]
}

model JefeFamilia {
    cod             BigInt @id() @default(autoincrement())
    nombres         String
    apellidos       String
    numeroDocumento String
    edad            Int

    fechaNacimiento DateTime
    genero          String

    serialCarnetPatria String
    codCarnetPatria    String

    observacion String

    Censo Censo[]
}

model Casa {
    id        BigInt @id() @default(autoincrement())
    manzana   String
    casa      String
    calle     String
    direccion String

    Censo Censo[]
}

model Censo {
    cod String @id()

    cargaFamiliar        Int
    tipoFamilia          String
    cajasClapsPorRecibir Int

    jefeFamiliaCod BigInt
    casaId         BigInt
    familiarId     BigInt?

    jefeFamilia JefeFamilia @relation(fields: [jefeFamiliaCod], references: [cod])
    casa        Casa        @relation(fields: [casaId], references: [id])

    Familiar Familiar? @relation(fields: [familiarId], references: [id])
}
