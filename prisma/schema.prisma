// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id       String  @id @default(cuid())
    name     String
    username String  @unique
    image    String?
    lastName String
    password String

    accounts Account[]
    sessions Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// CENSO 

model JefeFamilia {
    id                 BigInt     @id() @default(autoincrement())
    nombres            String
    apellidos          String
    fechaNacimiento    DateTime
    genero             String
    telefono           String
    email              String
    tipoDocumento      String
    numeroDocumento    String
    serialCarnetPatria String
    codCarnetPatria    String
    observacion        String
    condicionEspecial  String
    censo              Censo?
    familiar           Familiar[]
}

model Familiar {
    id BigInt @id() @default(autoincrement())

    nombres         String
    apellidos       String
    numeroDocumento String
    tipoDocumento   String
    fechaNacimiento DateTime
    genero          String

    serialCarnetPatria String
    codCarnetPatria    String
    observacion        String
    parentesco         String
    condicionEspecial  String

    jefeFamilia JefeFamilia @relation(fields: [jefeFamiliaId], references: [id])

    jefeFamiliaId BigInt
}

model Casa {
    id      BigInt @id() @default(autoincrement())
    manzana String
    casa    String
    calle   String

    censo Censo[]
}

model Censo {
    id                   String      @id()
    cargaFamiliar        Int         @default(1)
    tipoFamilia          String      @default("unifamiliar")
    cajasClapsPorRecibir Int         @default(0)
    fecha                DateTime    @default(now())
    jefeFamilia          JefeFamilia @relation(fields: [jefeFamiliaId], references: [id])
    jefeFamiliaId        BigInt      @unique
    casa                 Casa        @relation(fields: [casaId], references: [id])
    casaId               BigInt
}
